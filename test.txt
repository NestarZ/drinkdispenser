>>> maintenance(machine)
<__main__.DistributeurMaintenance object at 0x00000000036B3C18>
>>> mise_en_service(machine)
<__main__.DistributeurFonctionnement object at 0x00000000036B3C18>
>>> maintenance(machine)
<__main__.DistributeurMaintenance object at 0x00000000036B3C18>
>>> mise_en_service(machine)
<__main__.DistributeurFonctionnement object at 0x00000000036B3C18>
>>> machine
<__main__.DistributeurFonctionnement object at 0x00000000036B3C18>
>>> maintenance(machine)
<__main__.DistributeurMaintenance object at 0x00000000036B3C18>
>>> machine
<__main__.DistributeurMaintenance object at 0x00000000036B3C18>
>>> machine.reset()


>>> machine.reset()
Exception: Action reset indisponnible en mode Fonctionnement
>>> maintenance(machine)
<__main__.DistributeurMaintenance object at 0x0000000003223C18>
>>> machine.reset()
>>> machine.is_enough_stock()
Exception: Action is_enough_stock indisponnible en mode Maintenance

>>> a = DistributeurFonctionnement(DistributeurMaintenance(int))
Traceback (most recent call last):
  File "<pyshell#76>", line 1, in <module>
    a = DistributeurFonctionnement(DistributeurMaintenance(int))
  File "E:\Users\Elias\OneDrive\Licence MIASHS\Semestre 5\Informatique Théorique 2\Machine à café\drinkdispenser\distributeur.py", line 259, in __new__
    assert isinstance(other, Distributeur), "Seul un distributeur peut être basculé en mode maintenance."
AssertionError: Seul un distributeur peut être basculé en mode maintenance.
>>> maintenance(machine)
<__main__.DistributeurMaintenance object at 0x0000000003DF1C50>
>>> machine.reset()
>>> mise_en_service(machine)
<__main__.DistributeurFonctionnement object at 0x0000000003DF1C50>
>>> machine.reset()
Traceback (most recent call last):
  File "<pyshell#80>", line 1, in <module>
    machine.reset()
  File "E:\Users\Elias\OneDrive\Licence MIASHS\Semestre 5\Informatique Théorique 2\Machine à café\drinkdispenser\distributeur.py", line 238, in reset
    raise DistributeurFonctionnement.exception('reset')
Exception: Action reset indisponnible en mode fonctionnement
>>>






>>> m = Distributeur()
>>> m.changer_prix_unitaire('chocolat', 50)
>>> m.remplir_stock('chocolat')
>>> m.remplir_stock(5) #remplit les boites de centimes
>>> m.remplir_stock(10)
>>> m.remplir_stock(20)
>>> m.remplir_stock(50)
>>> m.commander((0,0,0,3,0,1), (0,0,0,0,0,1))

envoyé> (0, 0, 0, 3, 0, 1)
rendu1> (0, 0, 0, 0, 0, 0)
rendu2> (0, 0, 0, 0, 1, 1) Préparation de la boisson (Prix=50)
Et voici un Chocolat!!

>>> m.changer_prix_unitaire('sucre', 10)
>>> m.commander((0,0,0,3,0,1), (0,1,0,0,0,1,))

envoyé> (0, 0, 0, 3, 0, 1)
rendu1> (0, 0, 0, 0, 0, 0)
rendu2> (0, 0, 0, 0, 0, 1) Préparation de la boisson (Prix=60)
Et voici un Chocolat avec 1 morceaux de sucre!!

>>> m.statistiques()
           Macciato   Capuccino  The        Cafe       Chocolat
Vendu      0          0          0          0          2
+Lait%     0          0          0          0          0
Vendu%     0          0          0          0          100
Moy. Sucre 0          0          0          0          1
+Sucre%    0          0          0          0          50

         Chocolat Sucre    Thé      Café     Lait
#Conso   2        1        0        0        0
%Conso   66       33       0        0        0

>>> m.commander((0,0,0,1,0,1), (0,1,0,0,0,1,))

envoyé> (0, 0, 0, 1, 0, 1)
rendu1> (0, 0, 0, 0, 0, 0)
rendu2> (0, 0, 0, 1, 0, 1) Prix=60 > à la somme des pièces entrées=25

>>> m.remplir_tout_stock()
>>> m.stocks
{
'sucre': Boite(100/100 dose(s) de sucre),
50: Boite(100/100 pièce(s) de 50 centimes),
'café': Boite(100/100 dose(s) de café),
5: Boite(100/100 pièce(s) de 5 centimes),
'lait': Boite(100/100 dose(s) de lait),
20: Boite(100/100 pièce(s) de 20 centimes),
10: Boite(100/100 pièce(s) de 10 centimes),
'thé': Boite(100/100 dose(s) de thé),
'chocolat': Boite(100/100 dose(s) de chocolat)
}
